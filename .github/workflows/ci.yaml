name: Pulumi ECR Deployment
on: 
  workflow_dispatch:

jobs:
  deploy-ECR:

    runs-on: ubuntu-latest

    env:
      PULUMI_STACK: ${{secrets.PULUMI_STACK}}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip

      - name: Install Pulumi SDK
        run: | 
          pip install pulumi
          pip install pulumi pulumi-aws
          python -m venv venv
          source venv/bin/activate
          pip install -r requirements.txt

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS}}
          aws-secret-access-key: ${{ secrets.AWS_SEC }}
          aws-region: us-west-2  # Replace with your region

      - name: Pulumi up
        uses: pulumi/actions@v5
        with:
          command: up
          stack-name: ${{ secrets.PULUMI_STACK }}  # Specify your Pulumi stack name here
        env:
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_KEY }}

      - name: Get ECR repository URL
        id: ecr
        run: echo "::set-output name=repository_url::$(pulumi stack output repository_url)"
        env:
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_KEY }}

      - name: Pulumi Output
        run: pulumi stack output

  build-image:
    runs-on: ubuntu-latest
    needs: deploy-ECR
    env:
      PULUMI_STACK: ${{secrets.PULUMI_STACK}}

    steps:
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.ecr.outputs.repository_url }}
        ECR_REPOSITORY: Pulumi_ecr_repo  # Replace with your ECR repository name
        IMAGE_TAG: ${{ github.sha }}
      run: |
        git clone -b Glokar https://github.com/damatechguy27/dockerfiles.git
        cd Glokar
        docker build -t $ECR_REGISTRY:$IMAGE_TAG .
        docker push $ECR_REGISTRY:$IMAGE_TAG
    
    - name: Process Complete
      run: echo "Work Complete"

